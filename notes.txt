-> we learn 


Text ->this component is use to display text in your app and you can add style css to this text 
,view-> its similar to the div which wrap all components  in your app 
, touchableopacity-> if you want to make button 
, touchablehighlight ->  if you want to make button with highlight effect 
, touchablewithoutfeedback->not any visual feedback 
,activity indicator ->   it is used to show the loading animation 
, image -> tp display image 
.imagebackground-> to use image as background 
, Flatlist -> for long list of items (item sepeartion) .For larger lists with smooth scrolling 
 , ScrollView -> Hold multilpe components (like a magic box )
  , SafeAreaView -> use to support screen on differnet devices (border and all can be handel by the this)
  , TextInput -> to take the input from user 
  and many more to , to explore it go the react native documnetation


-> ANIMATION using ANIMETABLE 
design using style sheet and tailwind css (We use NAIVEWIND for styling )

->With react Native you can write the code for both IOS and Android application (not the seperate code base)

->Backend using App write (open source to add Oauth , database , storage and more )

-> real time support  using react native debugger and react native inspector 

(FOLLOW THE EXPO DOCUMENTATION  FOR MORE INFO)


STEP 1:-Create an expo project 

npx create-expo-app 
cd folder_name
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar
npx expo start -c -->to start the project 



Step 2 -

 Explore the app.json file



Step 3:-

change the code of you _layout.jsx code to this code to see hello world

import { StyleSheet, Text, View } from "react-native";
import React from "react";
import { Slot } from "expo-router";

const RootLayout = () => {
  return (
    <>
      <Text>Header</Text>
      <Slot />
      <Text>Footer </Text>
    </>
  );
};

export default RootLayout;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});




Step 4:- 

Create a index.jsx file inside the app  --> this is the first file which can run (home page )


import React from "react";
import { StatusBar } from "expo-status-bar";
import { StyleSheet, Text, View } from "react-native";

export default function App() {
  return (
    <View style={styles.container}>
      <Text>Hello abhishek you have created your new project!</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});




STep 5 :-

 create a profile page (profile.jsx)

add basic syntex to it 
in index.jsx 

import { Link } from "expo-router";
then add <Link href="./profile" style={{ color: "blue" }}> so that we can directly render to the profile page 




STEP 6:- 


INSTALL A NATIVE WIND from doxumentation Go to nativewind--> Go to quickstart expo

npm install nativewind
npm install --save-dev tailwindcss@3.3.2
npx tailwindcss init

A tailwind/config.js is created 
then COPY the secound content in the documnetation and paste it in origin file

content: [
    "./app/**/*.{js,jsx,ts,tsx}",                ---> chnage the App to app and add /**/* infront of it 
    "./<custom directory>/**/*.{js,jsx,ts,tsx}",
  ],


  Now go to the babel.config.js and paste the plugin Here 

   return {
    presets: ["babel-preset-expo"],
    plugins: ["nativewind/babel"],
  };




STEP 7:-

Add the tailwind extend (font family and all to the tailwind.config.js file)
add assests files contain all font styles and images 

Add the font you want in your app 
also load it in the  constants as shown in the file "constants"
const [fontLoaded, error] = useFonts({
    "Poppins-Black": require("../assets/fonts/poppins-Black.ttf"),
  }); --> imoport this font in the _layout.jsx file


add the file native_app\constants

DO THIS ALL STUF IN THE _layout 
-> and if you want to add the style of the font in another file then just declear it like 
      <Text className="text-3xl font-pbold ">Abhi's Project</Text>

like this 


STEP 8:-

FILE AND FOLDER STRUCTURE 

For AUTH screen 
create a (auth) folder in the app folder {allowing you to add additional pages in your screen }
Craete _layout.jsx inside the (auth ) folder 


Create a (tab ) folder to handel all tabs
create a search folder and a [query ] file inside to  handel all search query


STEP  9:- 

HANDEL NAVIAGTIONS OF ALL FILES (form one tab to another )
now go to the tabs/_layout and see the code 

STEP 10 :- 

index.jsx is our 1st screen 
(auth) sign in , sign out 2nd 
(tabs)  3rd  screen 


STEP  11:-

  AUTH sign-in and SIGN up
explore sign in and sign out page in the auth 


STEP 12 :- 

APP WRITTER frameworks

Add Authentication, Databases, Functions, Storage, and Messaging to your projects using the frameworks and languages of your choice.  

-> GO TO THE CONSOLE 
-> follow the steps  to create a new project on appwritter
-> go to the app.json -> put the package in the file so same to same you added to the appwritter
"ios": {
      "supportsTablet": true,
      "package":"com.jsm.mytube"
    },


also paste it under 
"android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package":"com.jsm.mytube" --> here 

    },


create a lib folder 
create a file appwrite.js inside the lib folder 
add the in it 

Create a database in the  appwrite dashboard 
copy the id and paste it in the  appwrite.js file (lib)
IN DATABASE 
create a collection under database name user and
 copy its id and paste it in the appwriter.js

IN DATABASE 

 create a collection under database name videos and
 copy its id and paste it in the appwriter.js

Step  13 :- 
Add the attribuites under the user user, email , avavtor , accountid
Go the the setting and go to the permissions and and add select all (create ,read update , delete )

Go to the videos sections and create an attributes for it 
(to see the attribute go to the attributes section in the videos collections)


Choose the attributes realation for the last attribute  
relation between the user and the video 
one creator can create a many videos 


Step  13 :- 
Storage 
--> create a bucket in the stoarge (files)
->> add the Stoarage it to the appwriter(lib)
->> goto the setting and upadte the permissions for the users (create ,read update , delete )
--> add roll -->guest -> give the only permisson of read
--> Allowed file Extensions jps,mp4 etc





